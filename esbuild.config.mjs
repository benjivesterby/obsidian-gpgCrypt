import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import copyStaticFiles from "esbuild-copy-static-files";
import fs from "fs";
import path from "path";

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/`;

const prod = (process.argv[2] === "production");
const outTarget = process.argv[3] || "./dist/";

console.log("Output Directory: ", outTarget);

const cssSrc = path.resolve("./src/styles.css");
const cssDest = path.resolve(outTarget, "styles.css");

function copyCss() {
	fs.copyFile(cssSrc, cssDest, (err) => {
		if (err) {
			console.error("Failed to copy CSS:", err);
		} else {
			console.log("CSS updated:", cssDest);
		}
	});
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: outTarget + "/main.js",
	plugins: [
		copyStaticFiles({
			src: "manifest.json",
			dest: outTarget + "/manifest.json",
		}),
		copyStaticFiles({
			src: "./src/styles.css",
			dest: outTarget + "/styles.css"
		})
	],
	define: {
		'process.env.DEBUG': JSON.stringify(!prod),
	}
});

if (prod) {
	await context.rebuild();
	copyCss();
	process.exit(0);
} else {
	await context.watch();

	// Watch CSS file and re-copy on change
	fs.watchFile(cssSrc, { interval: 100 }, (curr, prev) => {
		if (curr.mtime !== prev.mtime) {
			copyCss();
		}
	});
}
